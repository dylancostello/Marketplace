@page "/"
@using MarketplaceAPI.Models
@inject HttpClient Http
@layout MainLayout

<div class="container mt-4">
    <h2 class="mb-4">Active Listings</h2>

    <div class="input-group mb-4">
        <input class="form-control"
               placeholder="Search listings..."
               @bind="searchTerm"
               @bind:event="oninput" 
               @onkeydown="HandleKeyDown" />

        @if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            <button class="btn btn-secondary" @onclick="ClearSearch">
                <i class="bi bi-x-lg"></i> Clear
            </button>
        }

        <button class="btn btn-primary" @onclick="PerformSearch">
            <i class="bi bi-search"></i> Search
        </button>
    </div>

    @if (listings == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status"></div>
        </div>
    }
    else if (!listings.Any())
    {
        <div class="alert alert-warning">No listings found.</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var item in listings)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="@item.ImageUrl"
                             class="card-img-top"
                             alt="@item.Title"
                             style="height:200px; object-fit:cover;" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@item.Title</h5>
                            <p class="text-success fw-bold">$@item.Price</p>
                            <p class="card-text text-truncate">@item.Description</p>
                            <a href="/listing/@item.Id" class="btn btn-primary btn-sm mt-auto">View</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private List<ListingResponseDto>? listings;

    protected override async Task OnInitializedAsync()
    {
        await LoadListings();
    }

    private async Task LoadListings()
    {
        listings = await Http.GetFromJsonAsync<List<ListingResponseDto>>("api/listings/active");
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadListings();
            return;
        }

        listings = await Http.GetFromJsonAsync<List<ListingResponseDto>>(
            $"api/listings/search?q={Uri.EscapeDataString(searchTerm)}");
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        await LoadListings();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch();
        }
    }
}
