@page "/profile"
@using System.Security.Claims
@inject HttpClient Http
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@layout MainLayout

<h3 class="mb-3">My Profile</h3>

@if (user != null && user.Identity?.IsAuthenticated == true)
{
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <p><strong>Username:</strong> @user.FindFirst("unique_name")?.Value</p>
            <p><strong>Email:</strong> @user.FindFirst("email")?.Value</p>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">You are not logged in.</div>
}

<h3 class="mb-3">My Listings</h3>

@if (listings == null)
{
    <p><em>Loading your listings...</em></p>
}
else if (!listings.Any())
{
    <p>You don't have any listings yet.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var l in listings)
        {
            <div class="col">
                <div class="card h-100 shadow-sm border-secondary position-relative">
                    <!-- Image -->
                    <img src="@l.ImageUrl"
                         class="card-img-top @(l.IsSold ? "opacity-25" : "")"
                         alt="@l.Title"
                         style="height:200px; object-fit:cover;" />

                    <!-- SOLD badge overlay -->
                    @if (l.IsSold)
                    {
                        <div class="sold-overlay">
                            SOLD
                        </div>
                    }

                    <div class="card-body d-flex flex-column">
                        <!-- Fade only text content if sold -->
                        <div class="@(l.IsSold ? "opacity-50" : "")">
                            <h5 class="card-title">@l.Title</h5>
                            <p class="card-text text-truncate">@l.Description</p>
                            <p class="card-text"><strong>Price:</strong> $@l.Price</p>
                        </div>

                        <!-- Buttons stay full opacity -->
                        <div class="mt-auto d-flex justify-content-between">
                            <a class="btn btn-primary" href="/listing/@l.Id">View Details</a>
                            <button class="btn btn-warning" @onclick="() => EditListing(l.Id)">Edit</button>
                            <button class="btn btn-sm btn-primary"
                                    @onclick="() => ToggleSold(l.Id)">
                                @(l.IsSold ? "Mark as Active" : "Mark as Sold")
                            </button>
                            <button class="btn btn-danger mt-auto" @onclick="() => DeleteListing(l.Id)">Delete</button>
                        </div>
                    </div>
                </div>

            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger mt-2">@message</div>
}

@code {
    private ClaimsPrincipal? user;
    private List<ListingResponseDto>? listings;
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user == null || !user.Identity?.IsAuthenticated == true)
        {
            Nav.NavigateTo("/login");
            return;
        }

        await LoadListings();
    }

    private async Task LoadListings()
    {
        try
        {
            var token = await AuthService.GetToken();
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            listings = await Http.GetFromJsonAsync<List<ListingResponseDto>>("api/listings/user");
        }
        catch
        {
            listings = new List<ListingResponseDto>();
            message = "Failed to load listings.";
        }
    }

    private async Task DeleteListing(Guid listingId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete listing {listingId}?");
        if (!confirm) return;

        try
        {
            var token = await AuthService.GetToken();
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"api/listings/{listingId}");
            if (response.IsSuccessStatusCode)
            {
                // Remove from local list to update UI
                listings.RemoveAll(l => l.Id == listingId);
            }
            else
            {
                message = "Failed to delete listing.";
            }
        }
        catch
        {
            message = "An error occurred while deleting the listing.";
        }
    }

    private void EditListing(Guid listingId)
    {
        Nav.NavigateTo($"/listing/edit/{listingId}");
    }

    private async Task ToggleSoldStatus(Guid listingId)
    {
        var listing = listings.FirstOrDefault(l => l.Id == listingId);
        if (listing == null) return;

        var newStatus = !listing.IsSold;

        var token = await AuthService.GetToken();
        if (string.IsNullOrEmpty(token)) return;

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var response = await Http.PutAsJsonAsync($"api/listings/{listingId}/sold", new { IsSold = newStatus });

        if (response.IsSuccessStatusCode)
        {
            listing.IsSold = newStatus; // Update UI immediately
        }
        else
        {
            message = "Failed to update listing status.";
        }
    }

    private async Task ToggleSold(Guid listingId)
    {
        try
        {
            var token = await AuthService.GetToken();
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Using the lightweight PATCH endpoint
            var response = await Http.PatchAsync($"api/listings/{listingId}/toggle-sold", null);

            if (response.IsSuccessStatusCode)
            {
                var listing = listings.FirstOrDefault(l => l.Id == listingId);
                var result = await response.Content.ReadFromJsonAsync<ListingResponseDto>();
                listing.IsSold = result?.IsSold ?? listing.IsSold;
                
            }
            else
            {
                message = "Failed to toggle sold status.";
            }
        }
        catch
        {
            message = "An error occurred while updating the sold status.";
        }
    }



    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
}
