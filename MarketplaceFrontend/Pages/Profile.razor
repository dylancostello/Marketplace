@page "/profile"
@using System.Security.Claims
@using MarketplaceAPI.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@layout MainLayout

<h3 class="mb-3">My Profile</h3>
<h3>All Claims</h3>
<ul>
    @foreach (var claim in user?.Claims ?? Enumerable.Empty<Claim>())
    {
        <li>@claim.Type: @claim.Value</li>
    }
</ul>

@if (user != null && user.Identity?.IsAuthenticated == true)
{
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <p>
                <strong>Username:</strong> @user.FindFirst("unique_name")?.Value</p>
            <p><strong>Email:</strong> @user.FindFirst("email")?.Value</p>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">You are not logged in.</div>
}

<h3 class="mb-3">My Listings</h3>

@if (listings == null)
{
    <p><em>Loading your listings...</em></p>
}
else if (!listings.Any())
{
    <p>You don't have any listings yet.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var l in listings)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    <img src="@l.ImageUrl" class="card-img-top" alt="@l.Title" style="height:200px; object-fit:cover;" />
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@l.Title</h5>
                        <p class="card-text text-truncate">@l.Description</p>
                        <p class="card-text"><strong>Price:</strong> $@l.Price</p>
                        <a class="btn btn-primary mt-auto" href="/listing/@l.Id">View Details</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private ClaimsPrincipal? user;
    private List<ListingResponseDto>? listings;

    protected override async Task OnInitializedAsync()
    {
        // Get the authenticated user from JWT
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (user == null || !user.Identity?.IsAuthenticated == true)
        {
            // Not logged in, redirect to login
            Nav.NavigateTo("/login");
            return;
        }

        // Fetch user's listings
        var token = await AuthService.GetToken();
        if (string.IsNullOrEmpty(token)) return;

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        try
        {
            listings = await Http.GetFromJsonAsync<List<ListingResponseDto>>("api/listings/user");
        }
        catch
        {
            listings = new List<ListingResponseDto>();
        }
    }
}
